/**
 * @author Benjamin Guirlet
 * @description
 *      Contains the command 'salon_repost'.
 *      It allows the administrators to define in which channel the repost feature is enabled.
 */


const { SlashCommandBuilder } = require( "@discordjs/builders" );
const { CommandInteraction } = require( "discord.js" );
const sqlUtils = require( "../../utils/sqlUtils" );
const {ADMINS} = require("../../files/guild_data.json");


/* ----------------------------------------------- */
/* COMMAND BUILD                                   */
/* ----------------------------------------------- */
const slashCommand = new SlashCommandBuilder()
	.setName( "salon_feed" )
	.setDescription( "Permet de d'ajouter ou enlever le salon courant comme le salon du feed pour le bot." )
	.addSubcommand( subCommand =>
		subCommand
			.setName( "add" )
			.setDescription( "Ajoute le salon actuel comme le salon du feed." )
	)
	.addSubcommand( subCommand =>
		subCommand
			.setName( "remove" )
			.setDescription( "Enlève le salon courant comme le salon du feed." )
	);


/* ----------------------------------------------- */
/* FUNCTIONS                                       */
/* ----------------------------------------------- */
/**
 * Function called when the command 'salon_memes'
 * @param {CommandInteraction} interaction The interaction generated by the command's execution.
 */
async function execute( interaction ) {
	if ( !ADMINS.includes( interaction.user.id ) ) {
		await interaction.reply(
			{ content: "Vous n'avez pas les permissions pour exécuter cette commande.", ephemeral: true }
		);
		return;
	}

	switch ( interaction.options.getSubcommand() ) {
		case 'add':
			await sqlUtils.updateChannelBot( interaction.channelId, "repost", true );
			await interaction.reply(
				{ content: "Ce salon est maintenant un salon de reposts!", ephemeral: true }
			);
			break;
		case 'remove':
			await sqlUtils.updateChannelBot( interaction.channelId, "repost", false );
			await interaction.reply(
				{ content: "Ce salon n'est plus un salon de reposts!", ephemeral: true }
			);
			break;
	}
}


/* ----------------------------------------------- */
/* MODULE EXPORTS                                  */
/* ----------------------------------------------- */
module.exports = {
	data: slashCommand,
	execute
}